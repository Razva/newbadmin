#!/bin/bash
clear

# Style
red=$'\e[91m'
green=$'\e[92m'
yellow=$'\e[93m'
cyan=$'\e[96m'
normal=$'\e[0m'
bold=$'\e[1m'

h1() { printf '%s=== %s%s' "$green" "$1" "$normal"; }
h2() { printf '%s== %s%s' "$yellow" "$1" "$normal"; }
h3() { printf '%s= %s%s' "$cyan" "$1" "$normal"; }
ye() { printf '%s' "$yellow" "$1" "$normal"; }
cy() { printf '%s' "$cyan" "$1" "$normal"; }

# General Variables
os=$(rpm -E %{rhel})
selinux=$(getenforce)

# General Information
h1 'System information'
printf '\nCentOS Version: %s\n' "$red$bold$(rpm -E %{rhel})$normal"
printf 'Current Hostname: %s\n' "$red$bold$(hostname)$normal"
printf 'SELinux Status: %s\n' "$red$bold$(getenforce)$normal"
printf 'Current Date & Time: %s\n\n' "$red$bold$(date '+%H:%M:%S') |$(timedatectl | grep 'Time zone' | sed -E 's/ +/ /g') $normal"

# Dependencies and Utilities
h1 'Install Dependencies and Utilities? [Y/n] ' ; read -r deps
case ${deps,,} in
        [yY][eE][sS]|[yY]|"")
                h2 $'Installing Dependencies and Utilities\n'
                yum -y install epel-release nano screen tar unzip
                h2 $'Done - Dependencies and Utilities\n\n'
                ;;
        *) h2 $'Skipping Dependencies and Utilities\n\n'
esac

# Cockpit
h1 'Remove Cockpit? [Y/n] ' ; read -r cockpit
case ${cockpit,,} in
        [yY][eE][sS]|[yY]|"")
                h2 $'Removing Cockpit\n'
                yum -y remove cockpit-*
                h2 $'Done - Cockpit\n\n'
                ;;
        *) h2 $'Skipping Cockpit\n\n'
esac

# OS Updates
h1 'Update OS? [Y/n] ' ; read -r update
case ${update,,} in
        [yY][eE][sS]|[yY]|"")
                h2 $'Updating OS\n'
                yum -y update
                h2 $'Done - OS Updates\n\n'
                ;;
        *) h2 $'Skipping OS Updates\n\n';
esac

# Hostname
h1 'Set Hostname? [Y/n] ' ; read -r nhostname
case ${nhostname,,} in
        [yY][eE][sS]|[yY]|"")
                h2 $'Setting Hostname\n'
                h3 'New hostname: ' ; read -r hostname
                hostnamectl set-hostname $hostname --static
                h2 $'Done - Hostname\n\n'
                ;;
        *) h2 $'Skipping Hostname\n\n';
esac

# Time
h1 'Set Time? [Y/n] ' ; read -r time
case ${time,,} in
        [yY][eE][sS]|[yY]|"")
		h2 $'Setting Time\n'
		yum -y -q install chrony
		systemctl enable chronyd
		systemctl start chronyd
                timedatectl set-timezone Europe/Bucharest
		h2 $'Done - Time\n\n'
                ;;
        *) h2 $'Skipping Time\n\n';
esac

# Sudoers
h1 'Add Sudoers? [Y/n] ' ; read -r sudoers
case ${sudoers,,} in
        [yY][eE][sS]|[yY]|"")
		h2 'New user: ' ; read -r user
		useradd $user
		passwd $user
		usermod -aG wheel $user
		h2 $'Done - New user!\n\n'
			
		h2 "Adding SSH Key for $user"$'\n'
		rm -rf /home/$user/.ssh
		mkdir -p /home/$user/.ssh
		wget -O /home/$user/.ssh/authorized_keys https://t.isp.fun/authorized_keys
		chmod 700 /home/$user/.ssh
		chmod 600 /home/$user/.ssh/authorized_keys
		chown -R $user:$user /home/$user/.ssh
		restorecon -R -v /home/$user/.ssh
		h2 $'Done - SSH Key\n\n'
		;;
        *) h2 $'Skipping Sudoers\n\n';
esac

# SSHD
h1 'Set custom SSHD Port? [Y/n] ' ; read -r sshdport
case ${sshdport,,} in
        [yY][eE][sS]|[yY]|"")
		h2 'New SSHD Port: ' ; read -r sshport
		h3 $'Installing FirewallD ...\n'
		yum -y install firewalld
		systemctl start firewalld
		h3 $'Done - Installing FirewallD\n\n'
			
		h3 $'Setting FirewallD Ports\n'
		firewall-cmd --zone=public --permanent --add-port=$sshport/tcp
		firewall-cmd --zone=public --permanent --add-port=80/tcp
		firewall-cmd --zone=public --permanent --add-port=443/tcp
		if [[ "$os" -eq 7 ]]; then
			echo "This is C7"
		fi
		
		if [[ "$os" -eq 8 ]]; then
			firewall-cmd --zone=public --permanent --remove-service=cockpit
			firewall-cmd --zone=public --permanent --remove-service=dhcpv6-client
		fi
		firewall-cmd --zone=public --permanent --remove-service=ssh
		firewall-cmd --reload
		
		printf '\n'
                h2 'Current FirewallD Rules: '
                printf "$red$bold$(firewall-cmd --list-all | sed -n 's/  ports: *//p')$normal\n\n"
		
		h3 $'Done - Setting FirewallD Ports\n\n'

		h3 $'Adding SELinux SSHD Port Rule\n'
		if [[ "$os" -eq 7 ]]; then
			yum -y install policycoreutils-python
		fi
		
		if [[ "$os" -eq 8 ]]; then
			dnf -y install policycoreutils-python-utils
		fi
		semanage port -a -t ssh_port_t -p tcp $sshport
		h3 $'Done - SELinux SSHD Port Rule\n\n'

		h3 'Changing SSHD Port ... '
		sed -i 's/^#Port 22$/Port "${sshport}"/g' /etc/ssh/sshd_config
		cy $'done!\n\n'

		h3 'Restarting SSHD ... '
		systemctl restart sshd
		cy $'done!\n\n'
                ;;
        *) h2 $'Skipping custom SSHD\n\n';
esac

# Auto Updaters
h1 'Set Auto-Updaters? [Y/n] ' ; read -r time
case ${time,,} in
        [yY][eE][sS]|[yY]|"")
                if [[ "$os" -eq 7 ]]; then
                        h2 $'Installing YUM-Cron\n'
                        yum -y install yum-cron
                        h2 $'Done - YUM-Cron\n\n'

                        h2 'Patching config ... '
                        sed -i 's/^apply_updates = no$/apply_updates = yes/g' /etc/yum/yum-cron.conf
                        ye $'done!\n\n'

                        h2 'Enabling and starting YUM-Cron ... '
                        systemctl enable yum-cron
                        systemctl start yum-cron
                        ye $'done!\n\n'
                fi
		
		if [[ "$os" -eq 8 ]]; then
                        h2 $'Installing YUM-Cron\n'
                        dnf -y install dnf-automatic
                        h2 $'Done - YUM-Cron\n\n'

                        h2 'Patching config ... '
                        sed -i 's/^apply_updates = no$/apply_updates = yes/g' /etc/dnf/automatic.conf
			sed -i 's/^emit_via = stdio$/emit_via = motd/g' /etc/dnf/automatic.conf
                        ye $'done!\n\n'

                        h2 'Enabling and starting YUM-Cron ... '
			systemctl enable --now dnf-automatic.timer
			systemctl start dnf-automatic
                        ye $'done!\n\n'
		fi
		;;
        *) h2 $'Skipping Auto-Updaters\n\n';
esac

# Zabbix
h1 'Install Zabbix? [Y/n] ' ; read -r zabbix
case ${zabbix,,} in
        [yY][eE][sS]|[yY]|"")
		h2 $'Installing Zabbix Agent\n\n'
                if [[ "$os" -eq 7 ]]; then
			rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm
    			yum clean all
    			yum -y install zabbix-agent
			h2 $'Done - Installing Zabbix Agent for CentOS 7\n\n'
                fi

                if [[ "$os" -eq 8 ]]; then
			rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/8/x86_64/zabbix-release-5.0-1.el8.noarch.rpm
			dnf clean all
			dnf -y install zabbix-agent
			h2 'Done - Installing Zabbix Agent for CentOS 8\n\n'
                fi
		
		h2 'Patching Config File ... '
		sed -i 's/^Server=127.0.0.1$/Server=zbx-client.neutralisp.com/g' /etc/zabbix/zabbix_agentd.conf
		sed -i "s/^Hostname=Zabbix server$/Hostname=$HOSTNAME/g" /etc/zabbix/zabbix_agentd.conf
		ye $'done!\n\n'
		
		h3 'Add Zabbix FirewallD Rules? [Y/n] ' ; read -r fzabbix
			case ${fzabbix,,} in
       				[yY][eE][sS]|[yY]|"")
				firewall-cmd --zone=public --permanent --add-port=10050/tcp
				firewall-cmd --reload
				h3 $'Done - Adding Zabbix FirewallD Rules\n\n'	
				;;
				*) h3 $'Skipping Zabbix FirewallD Rules\n\n'
			esac
		
		h2 'Enabling and starting service ... '
		systemctl enable zabbix-agent
		systemctl stop zabbix-agent
		systemctl start zabbix-agent
		ye $'done!\n\n'
	
		h2 $'Agent information:\n\n'
		printf 'Agent IP Address: %s\n' "$red$bold$(hostname -I)$normal"
		printf 'Agent Hostname: %s\n\n' "$red$bold$(hostname)$normal"
		;;
        *) h2 $'Skipping Zabbix\n\n';
esac

h1 $'Everything Done!\n\n'
